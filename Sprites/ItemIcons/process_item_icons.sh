#!/bin/bash

# Made using Gemini

PNG2DMP_PATH="../../Tools/EventAssembler/Tools/Png2Dmp"

# Check if Png2Dmp exists
if [ ! -x "$PNG2DMP_PATH" ]; then
    echo "Error: Png2Dmp not found at $PNG2DMP_PATH. Please set the PNG2DMP_PATH variable correctly."
    exit 1
fi

# Check if the IconData directory exists
if [ ! -d "IconData" ]; then
    echo "Error: IconData directory not found."
    exit 1
fi

# Create/Re-create output event and header file
OUTPUT_EVENT_FILE="MasterItemIconInstaller.event"
OUTPUT_HEADER_FILE="IconID.h"

> "$OUTPUT_EVENT_FILE"
> "$OUTPUT_HEADER_FILE"

# First lines of setup for the event and header file
echo "// Auto generated by process_portraits.sh" >> "$OUTPUT_EVENT_FILE"
echo "" >> "$OUTPUT_EVENT_FILE"
echo "PUSH" >> "$OUTPUT_EVENT_FILE"
echo "ORG 0x5926F4" >> "$OUTPUT_EVENT_FILE"
echo "" >> "$OUTPUT_EVENT_FILE"

echo "// Auto generated by process_portraits.sh" >> "$OUTPUT_HEADER_FILE"
echo "" >> "$OUTPUT_HEADER_FILE"
echo "#pragma once" >> "$OUTPUT_HEADER_FILE"
echo "" >> "$OUTPUT_HEADER_FILE"
echo "enum ItemIconDefinitions" >> "$OUTPUT_HEADER_FILE"
echo "{" >> "$OUTPUT_HEADER_FILE"



# Find all PNG files in the IconData directory and process them in alphabetical order
find "IconData" -type f -name "*.png" -print0 | sort -z | while IFS= read -r -d $'\0' file; do
    # Extract the filename without the .png extension
    filename=$(basename "$file" .png)
    # Construct the output filename
    output_filename="${filename}.dmp"
    # Construct the full output path
    output_path="IconData/${output_filename}"

    # Run Png2Dmp on the PNG file, redirecting output to the .dmp file
    if "$PNG2DMP_PATH" "$file" > "$output_path"; then
        echo "Successfully converted $file to $output_path"
    else
        echo "Error: Failed to convert $file"
    fi
    
    echo "    #incbin \"IconData/$output_filename\"" >> "$OUTPUT_EVENT_FILE"
    echo "    ICON_$filename," >> "$OUTPUT_HEADER_FILE"
done

echo "" >> "$OUTPUT_EVENT_FILE"
echo "POP" >> "$OUTPUT_EVENT_FILE"

echo "};" >> "$OUTPUT_HEADER_FILE"

echo "Processing complete."