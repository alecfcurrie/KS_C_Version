#!/bin/bash

SUBDIRECTORY="BattleAnimData"
OUTPUT_FILE="AnimationTableInstaller.event"
INDEX_FILE="AnimationIndexes.event"
REFERENCE_FILE="../Data/AnimationReference.h"
SOURCE_FILE="../Data/AnimationReference.c"
SKIP_IDS_FILE="TakenIDs.txt"

declare -A reserved_ids
declare -A reserved_animation_ids
declare -A animation_indexes
declare -A class_weapon_map

index=1

load_reserved_ids() {
  [[ -f "$SKIP_IDS_FILE" ]] || return
  local current_class_gender=""
  while IFS= read -r line; do
    trimmed="${line%%#*}"
    trimmed="${trimmed//[[:space:]]/}"

    if [[ "$line" =~ ^# ]]; then
      current_class_gender="$(echo "$line" | sed 's/# *//')"
      continue
    fi

    if [[ "$trimmed" =~ ^[0-9]+$ ]]; then
      id="$trimmed"
      weapon="$(echo "$line" | grep -oE "# *[A-Z_]+" | sed 's/# *//')"
      [[ -n "$current_class_gender" && -n "$weapon" ]] || continue
      key="${current_class_gender}_${weapon}"
      reserved_animation_ids["$key"]=$id
      reserved_ids["$id"]=1
      class_weapon_map["$current_class_gender"]+="$weapon"$'\n'
    fi
  done < "$SKIP_IDS_FILE"
}

next_free_index() {
  while [[ ${reserved_ids["$index"]+_} ]]; do
    ((index++))
  done
  echo "$index"
}

init_file() {
  : > "$1"
  echo "// Auto-generated by process_anims.sh" >> "$1"
  echo "" >> "$1"
}

write_battle_anim_def() {
  local weapon="$1"
  local full_id="$2"

  if [[ "$weapon" == "HANDAXE" ]]; then
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = ITEM_AXE_HANDAXE," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = ITEM_AXE_TOMAHAWK," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
  elif [[ "$weapon" == "MAGIC" ]]; then
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_ANIMA," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_DARK," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_STAFF," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
  elif [[ "$weapon" == "UNARMED" ]]; then
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_ITEM," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
  else
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_${weapon}," >> "$SOURCE_FILE"
    echo "        .index = (u16) $full_id" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
  fi
}

extract_class_gender_weapon() {
  local filepath="$1"
  local base=$(basename "$filepath" .event)
  local class_gender="${base%_*}"
  local weapon="${base##*_}"
  echo "$class_gender" "$weapon"
}

# Init files
init_file "$OUTPUT_FILE"
init_file "$INDEX_FILE"
init_file "$REFERENCE_FILE"
init_file "$SOURCE_FILE"

echo "#include \"AnimationIndexes.event\"" >> "$OUTPUT_FILE"
echo "#define ClassAnimTable (0xc00008-0x20)" >> "$OUTPUT_FILE"
echo "#define AnimTableEntry(index) \"ORG ClassAnimTable + (index * 0x20)\"" >> "$OUTPUT_FILE"

echo "#pragma once" >> "$REFERENCE_FILE"
echo "#define ITYPE_KNIFE ITYPE_LIGHT" >> "$REFERENCE_FILE"
echo "enum AnimationTableIndex {" >> "$REFERENCE_FILE"

echo "#include \"common-chax.h\"" >> "$SOURCE_FILE"
echo "#include \"KSDefinitions.h\"" >> "$SOURCE_FILE"

load_reserved_ids

# Parse .event files
while IFS= read -r filepath; do
  [[ -f "$filepath" ]] || continue
  read class_gender weapon < <(extract_class_gender_weapon "$filepath")
  key="${class_gender}_${weapon}"

  if [[ -z "${animation_indexes[$key]}" ]]; then
    next_index=$(next_free_index)
    animation_indexes[$key]=$next_index
    echo "#define $key $next_index" >> "$INDEX_FILE"
    echo "    $key = $next_index," >> "$REFERENCE_FILE"
    ((index=next_index+1))
  fi

  class_weapon_map["$class_gender"]+="$weapon"$'\n'

done < <(find "$SUBDIRECTORY" -type f -name "*.event" | sort)

# Append reserved animations that weren't seen
for key in "${!reserved_animation_ids[@]}"; do
  [[ -n "${animation_indexes[$key]}" ]] && continue
  id="${reserved_animation_ids[$key]}"
  animation_indexes[$key]=$id
  echo "#define $key $id" >> "$INDEX_FILE"
  echo "    $key = $id," >> "$REFERENCE_FILE"

  class_gender="${key%_*_*}"
  weapon="${key##*_}"
  class_gender="${key%_"$weapon"}"
  class_weapon_map["$class_gender"]+="$weapon"$'\n'
done

echo "};" >> "$REFERENCE_FILE"

# Emit AnimationTableInstaller.event + REF arrays
for class_gender in $(printf "%s\n" "${!class_weapon_map[@]}" | sort -u); do
  echo "// ${class_gender}" >> "$OUTPUT_FILE"
  echo "{" >> "$OUTPUT_FILE"

  seen=()
  while IFS= read -r weapon; do
    [[ -z "$weapon" ]] && continue
    key="${class_gender}_${weapon}"
    [[ " ${seen[*]} " =~ " ${key} " ]] && continue
    seen+=("$key")

    event_path="$SUBDIRECTORY/${key}.event"
    [[ -f "$event_path" ]] && echo "    #include \"$event_path\"" >> "$OUTPUT_FILE"
  done <<< "${class_weapon_map[$class_gender]}"

  echo "}" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"

  echo "extern const struct BattleAnimDef ${class_gender}_REF[];" >> "$REFERENCE_FILE"
  echo "const struct BattleAnimDef ${class_gender}_REF[] = " >> "$SOURCE_FILE"
  echo "{" >> "$SOURCE_FILE"

  for weapon in "${seen[@]}"; do
    write_battle_anim_def "${weapon##*_}" "$weapon"
  done

  echo "    {0}" >> "$SOURCE_FILE"
  echo "};" >> "$SOURCE_FILE"
  echo "" >> "$SOURCE_FILE"
done


echo "'$OUTPUT_FILE' and '$INDEX_FILE' generated successfully."
