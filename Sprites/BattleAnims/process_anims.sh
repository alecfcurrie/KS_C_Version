#!/bin/bash

# Define the subdirectory containing the event files
SUBDIRECTORY="BattleAnimData"

# Define the output files
OUTPUT_FILE="AnimationTableInstaller.event"
INDEX_FILE="AnimationIndexes.event"
REFERENCE_FILE="../Data/AnimationReference.h"
SOURCE_FILE="../Data/AnimationReference.c"

curr_weapon=""
curr_class_gender_weapon=""

# Function to write a header comment to a file
init_file() {
  local file="$1"
  : > "$file"  # Clear the file
  echo "// Auto-generated by process_anims.sh" >> "$file"
  echo "" >> "$file"
}

write_installer() {
  local filename="$1"

  echo "    #include \"$filename\"" >> "$OUTPUT_FILE"
}

write_reference() {
  extract_weapon_class "$1"
  write_battle_anim_def
}

write_battle_anim_def() {
  echo "    {" >> "$SOURCE_FILE"
  if [[ "$curr_weapon" == "HANDAXE" ]]; then
    echo "        .wtype = ITEM_AXE_HANDAXE," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = ITEM_AXE_TOMAHAWK," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
  elif [[ "$curr_weapon" == "MAGIC" ]]; then
    echo "        .wtype = 0x0100 | ITYPE_ANIMA," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_DARK," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
    echo "    }," >> "$SOURCE_FILE"
    echo "    {" >> "$SOURCE_FILE"
    echo "        .wtype = 0x0100 | ITYPE_STAFF," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
  elif [[ "$curr_weapon" == "UNARMED" ]]; then
    echo "        .wtype = 0x0100 | ITYPE_ITEM," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
  else
    echo "        .wtype = 0x0100 | ITYPE_${curr_weapon}," >> "$SOURCE_FILE"
    echo "        .index = (u16) $curr_class_gender_weapon" >> "$SOURCE_FILE"
  fi
  echo "    }," >> "$SOURCE_FILE"
}

# Function to extract the weapon name from the filepath
extract_weapon_class() {
  local filename="$1"

  # Remove the subdirectory prefix
  local basename="${filename#$SUBDIRECTORY}"
  
  # Extract the weapon type (assuming format ENTITY_WEAPON.event)
  curr_weapon="$(echo "$basename" | cut -d'_' -f3 | cut -d'.' -f1)"

  # Extract the class, gender, and weapon type
  curr_class_gender_weapon="$(echo "$basename" | cut -d'.' -f1 | tr -d '/')"
}

# Initialize files with header comments
init_file "$OUTPUT_FILE"
init_file "$INDEX_FILE"
init_file "$REFERENCE_FILE"
init_file "$SOURCE_FILE"

declare -A class_files
declare -A animation_indexes
index=1

echo "#include \"AnimationIndexes.event\"" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "#define ClassAnimTable (0xc00008-0x20)" >> "$OUTPUT_FILE"
echo "#define AnimTableEntry(index) \"ORG ClassAnimTable + (index * 0x20)\"" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

echo "#pragma once" >> "$REFERENCE_FILE"
echo "#define ITYPE_KNIFE ITYPE_LIGHT" >> "$REFERENCE_FILE"
echo "" >> "$REFERENCE_FILE"
echo "enum AnimationTableIndex {" >> "$REFERENCE_FILE"

echo "#include \"common-chax.h\"" >> "$SOURCE_FILE"
echo "#include \"KSDefinitions.h\"" >> "$SOURCE_FILE"
echo "" >> "$SOURCE_FILE"

# Find all event files, sort them, and process in order
while IFS= read -r event_file; do
  [[ -f "$event_file" ]] || continue

  file_name=$(basename "$event_file")

  # Extract base class name (keep [class]_[M|F|U], remove _[weapon].event)
  class_gender="${file_name%_*}"  # Remove last segment (weapon type)
  animation_name="${file_name%.event}"  # Remove .event extension

  # Extract weapon type (everything after the last underscore)

  # Collect class files, grouped by [class]_[M|F]
  class_files["$class_gender"]+="$event_file"$'\n'

  # Assign index if not already assigned
  if [[ -z "${animation_indexes[$animation_name]}" ]]; then
    animation_indexes[$animation_name]=$index
    echo "#define $animation_name $index" >> "$INDEX_FILE"
    echo "    $animation_name = $index," >> "$REFERENCE_FILE"
    ((index++))
  fi

done < <(find "$SUBDIRECTORY" -maxdepth 1 -type f -name "*.event" | sort)

echo "};" >> "$REFERENCE_FILE"
echo "" >> "$REFERENCE_FILE"

# Generate include statements for each class_gender group in sorted order
for class_gender in $(printf "%s\n" "${!class_files[@]}" | sort); do
  echo "// ${class_gender}" >> "$OUTPUT_FILE"
  echo "{" >> "$OUTPUT_FILE"
  
  echo "extern const struct BattleAnimDef ${class_gender}_REF[];" >> "$REFERENCE_FILE"

  echo "const struct BattleAnimDef ${class_gender}_REF[] = " >> "$SOURCE_FILE"
  echo "{" >> "$SOURCE_FILE"

  # Read stored filenames correctly and avoid extra newline issues
  while IFS= read -r file; do
    if [[ -n "$file" ]]; then
      write_installer "$file"
      write_reference "$file"
    fi
  done <<< "${class_files[$class_gender]}"
  
  echo "}" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"

  echo "    {0}" >> "$SOURCE_FILE"
  echo "};" >> "$SOURCE_FILE"
  echo "" >> "$SOURCE_FILE"
done

echo "'$OUTPUT_FILE' and '$INDEX_FILE' generated successfully."
