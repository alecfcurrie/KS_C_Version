#!/bin/bash

# Made using Gemini

# Define the subdirectory containing the PNG files
CARD_DATA_SUBDIRECTORY="ClassCardData"
BUILD_SUBDIRECTORY="Build"

# Define the program to process the PNG files
PROGRAM="../../Tools/EventAssembler/Tools/Png2Dmp"

# Define the output event files
OUTPUT_CARD_INSTALLER="ClassCardData.event"
OUTPUT_CARD_INSERTER="ClassCardInserter.event"
OUTPUT_HEADER_FILE="ClassCardID.h"

# Check if the subdirectory exists
if [[ ! -d "$BUILD_SUBDIRECTORY" ]]; then
    echo "Error: Subdirectory '$BUILD_SUBDIRECTORY' not found."
    exit 1
fi

# Check if the program exists and is executable
if [[ ! -x "$PROGRAM" ]]; then
    echo "Error: $PROGRAM is not executable or does not exist"
    exit 1
fi

# Process PNG files
find "$CARD_DATA_SUBDIRECTORY" -type f -name "*.png" -print0 | while IFS= read -r -d $'\0' file; do
    echo "Processing: $file"
    filename=$(basename "$file") # Get the full filename (e.g., image.png)
    output_main_file="CARD_${filename%.png}.dmp"
    output_palette_file="CARDPALETTE_${filename%.png}.dmp"
    "$PROGRAM" "$file" --lz77 -o "$BUILD_SUBDIRECTORY/$output_main_file"
    "$PROGRAM" "$file" --palette-only -po "$BUILD_SUBDIRECTORY/$output_palette_file"
    if [[ $? -ne 0 ]]; then
        echo "Error: $PROGRAM failed to process $file"
    fi
done

echo "Finished processing all PNG files."

# Create or overwrite the output files
> "$OUTPUT_CARD_INSTALLER"
> "$OUTPUT_CARD_INSERTER"
> "$OUTPUT_HEADER_FILE"

echo "// Auto generated by process_map_sprites.sh | Macro by Snakey1" >> "$OUTPUT_CARD_INSTALLER"
echo "" >> "$OUTPUT_CARD_INSTALLER"
echo "#define setCardEntry(cardEntry,cardLocation,cardPaletteLocation) \"PUSH; ORG PortraitTable+cardEntry*0x1C; POIN 0 0 cardPaletteLocation 0 cardLocation; POP\"" >> "$OUTPUT_CARD_INSTALLER"
echo "" >> "$OUTPUT_CARD_INSTALLER"

echo "// Auto generated by process_map_sprites.sh" >> "$OUTPUT_CARD_INSERTER"
echo "" >> "$OUTPUT_CARD_INSERTER"

echo "// Auto generated by process_map_sprites.sh" >> "$OUTPUT_HEADER_FILE"
echo "" >> "$OUTPUT_HEADER_FILE"
echo "enum ClassCardDefinitions {" >> "$OUTPUT_HEADER_FILE"

index=114

find "$CARD_DATA_SUBDIRECTORY" -type f -name "*.png" -print0 | while IFS= read -r -d $'\0' file; do
    filename=$(basename "$file") # Get the full filename (e.g., image.png)
    class="${filename%.png}"
    main_file="CARD_${filename%.png}.dmp"
    palette_file="CARDPALETTE_${filename%.png}.dmp"

    echo "// $class" >> "$OUTPUT_CARD_INSTALLER"
    echo "ALIGN 4" >> "$OUTPUT_CARD_INSTALLER"
    echo "${class}_CARD:" >> "$OUTPUT_CARD_INSTALLER"
    echo "#incbin \"Build/$main_file\"" >> "$OUTPUT_CARD_INSTALLER"
    echo "ALIGN 4" >> "$OUTPUT_CARD_INSTALLER"
    echo "${class}_CARD_PALETTE:" >> "$OUTPUT_CARD_INSTALLER"
    echo "#incbin \"Build/$palette_file\"" >> "$OUTPUT_CARD_INSTALLER"
    echo "" >> "$OUTPUT_CARD_INSTALLER"
    
    echo "setCardEntry($index, ${class}_CARD, ${class}_CARD_PALETTE)" >> "$OUTPUT_CARD_INSERTER"

    echo "    ${class}_CARD = $index," >> "$OUTPUT_HEADER_FILE"

    ((index++))
done

echo "};" >> "$OUTPUT_HEADER_FILE"

echo "Generated '$OUTPUT_CARD_INSTALLER' and '$OUTPUT_CARD_INSERTER'."

exit 0