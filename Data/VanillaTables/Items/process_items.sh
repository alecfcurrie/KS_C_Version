#!/bin/bash

# Define subdirectories
subdirectories=(
  "Swords"
  "Lances"
  "Axes"
  "Bows"
  "Light"
  "Anima"
  "Misc"
)

# Output file names
OUTPUT_HEADER_FILE="ItemIDs.h"
OUTPUT_EVENT_DEFINITIONS_FILE="ItemIDs.event"
OUTPUT_MASTER_INSTALLER_FILE="MasterItemInstaller.event"
RESERVED_IDS_FILE="hardcoded_ids.txt"

# Read reserved IDs into a map (name => id), and mark IDs as reserved
declare -A reserved_ids
declare -A reserved_defines
if [[ -f "$RESERVED_IDS_FILE" ]]; then
  while IFS= read -r line; do
    # Trim whitespace
    line="${line#"${line%%[![:space:]]*}"}"
    line="${line%"${line##*[![:space:]]}"}"
    
    # Skip comments and empty lines
    [[ -z "$line" || "$line" =~ ^# ]] && continue

    # Parse name and ID
    if [[ "$line" =~ ^([A-Za-z_][A-Za-z0-9_]*)[[:space:]]+([0-9]+)$ ]]; then
      define_name="${BASH_REMATCH[1]}"
      define_id="${BASH_REMATCH[2]}"
      reserved_ids[$define_id]=1
      reserved_defines[$define_name]=$define_id
    fi
  done < "$RESERVED_IDS_FILE"
fi

# Helper function to skip reserved IDs
get_next_valid_id() {
  while [[ ${reserved_ids[$id_counter]} ]]; do
    id_counter=$((id_counter + 1))
  done
}

# Start generating the header file
echo "// Auto-generated by process_items.sh" > "$OUTPUT_HEADER_FILE"
echo "" >> "$OUTPUT_HEADER_FILE"
echo "enum ItemDefinitions" >> "$OUTPUT_HEADER_FILE"
echo "{" >> "$OUTPUT_HEADER_FILE"
echo "    ITEM_NONE," >> "$OUTPUT_HEADER_FILE"

# Start generating the ItemIDs.event file
echo "// Auto-generated by process_items.sh" > "$OUTPUT_EVENT_DEFINITIONS_FILE"
echo "" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"

# Add hard-coded reserved items to the master installer file
if (( ${#reserved_defines[@]} > 0 )); then
  echo "// Hard-coded reserved item IDs" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"
  for name in "${!reserved_defines[@]}"; do
    echo "#define $name ${reserved_defines[$name]}" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"
  done
  echo "" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"
  echo "// Non hard-coded item IDs" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"
fi

# Start generating master installer file
echo "// Auto-generated by process_items.sh" > "$OUTPUT_MASTER_INSTALLER_FILE"
echo "" >> "$OUTPUT_MASTER_INSTALLER_FILE"
echo "#include \"$OUTPUT_EVENT_DEFINITIONS_FILE\"" >> "$OUTPUT_MASTER_INSTALLER_FILE"
echo "" >> "$OUTPUT_MASTER_INSTALLER_FILE"
echo "PUSH" >> "$OUTPUT_MASTER_INSTALLER_FILE"
echo "    ORG \$809B10 + \$24" >> "$OUTPUT_MASTER_INSTALLER_FILE"

# Initialize ID counter
id_counter=1

# Process each subdirectory
for subdir in "${subdirectories[@]}"; do
  echo "    // $subdir" >> "$OUTPUT_HEADER_FILE"

  # Create installer event file
  installer_event_file="$subdir/${subdir}Installer.event"
  echo "" > "$installer_event_file"

  # Add to the master installer file
  echo "    #include \"$installer_event_file\"" >> "$OUTPUT_MASTER_INSTALLER_FILE"

  # Process each C file in the subdirectory
  file_count=0
  for file in "$subdir"/*.c; do
    if [[ -f "$file" ]]; then
      filename=$(basename "$file")
      filename_no_extension="${filename%.c}"
      enum_name="ITEM_${filename_no_extension^^}" # Uppercase for enum
      define_name="ITEM_${filename_no_extension^^}" # Uppercase for define

      get_next_valid_id

      echo "    $enum_name," >> "$OUTPUT_HEADER_FILE"
      echo "#include ${filename_no_extension}.lyn.event" >> "$installer_event_file"
      echo "#define $define_name $id_counter" >> "$OUTPUT_EVENT_DEFINITIONS_FILE"

      file_count=$((file_count + 1))
      id_counter=$((id_counter + 1))
    fi
  done
  if [[ $file_count -eq 0 ]]; then
      echo "    // No Items in $subdir" >> "$OUTPUT_HEADER_FILE"
  fi
done

# Finish generating the header/master installer file
echo "POP" >> "$OUTPUT_MASTER_INSTALLER_FILE"
echo "};" >> "$OUTPUT_HEADER_FILE"

echo "Header file '$OUTPUT_HEADER_FILE', ItemIDs.event, and installer event files created."